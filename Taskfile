#!/bin/bash

function banner {
  echo -e "${RED}"
  echo " ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄   ▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▄▄   ▄▄ "
  echo "█       █       █   █ █ █       █      ██       █  █▄█  █"
  echo "█    ▄  █   ▄   █   █▄█ █    ▄▄▄█  ▄    █    ▄▄▄█       █"
  echo "█   █▄█ █  █ █  █      ▄█   █▄▄▄█ █ █   █   █▄▄▄█       █"
  echo "█    ▄▄▄█  █▄█  █     █▄█    ▄▄▄█ █▄█   █    ▄▄▄██     █ "
  echo "█   █   █       █    ▄  █   █▄▄▄█       █   █▄▄▄█   ▄   █"
  echo "█▄▄▄█   █▄▄▄▄▄▄▄█▄▄▄█ █▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄██▄▄▄▄▄▄▄█▄▄█ █▄▄█"
  echo -e "${ENDCOLOR}"
}

function docker:exec {
  docker compose exec --user php app sh -c "$1"
}

# ===========================
# Testing
# ===========================

function task:tests { ## Run all tests
  docker:exec "./vendor/bin/phpunit"
}

NETWORK=pokedex


# ===========================
# Proxy
# ===========================

function proxy:start {
  curl --silent https://gitlab.enrise.com/Enrise/DevProxy/-/raw/master/start.sh | sh
}

function proxy:connect {
  docker network connect $NETWORK enrise-dev-proxy || true
}

function proxy:stop {
  docker container stop enrise-dev-proxy || true
}

function proxy:disconnect {
  docker network disconnect $NETWORK enrise-dev-proxy || true
}

function task:build { ## Build and start the project containers.
  docker compose build
}

function task:start { ## Start the project and connects proxy
  docker compose up -d
  proxy:start
  proxy:connect

  echo "Project viewable on http://pokedex.local if you add '127.0.0.1 pokedex.local' to your hostfile"
}

function task:stop { ## Stop the project containers.
  proxy:disconnect

  docker compose down
}

function task:destroy { ## Stop and remove the project containers.
  proxy:disconnect

  docker compose down -v
}


function task:restart { ## Restart the project containers.
  docker compose restart
}

function task:shell { ## Open the application shell.
  docker compose exec app /bin/sh
}

function task:exec { ## Run anything in the application shell
  docker:exec "${@}"
}

# ===========================
# Default: help section
# ===========================

function task:help { ## Prints this index
    awk 'BEGIN {FS = " { [#][#][ ]?"} \
        /^([a-zA-Z_-]*:?.*)(\{ )?[#][#][ ]?/ {printf "\033[33m%-40s\033[0m %s\n", $1, $2}' $0 \
        | sed -E 's/[#]{2,}[ ]*//g' \
        | sed -E 's/function task:*//g'

    echo ""
    echo "Usage:"
    echo "$0 <task> <args>"
}

# ═══ Env variables ═════════

# Used for docker-compose
NETWORK=pokedex
export USERID=${USERID:-$(id -u)}
export GROUPID=${GROUPID:-$(id -g)}
export ON_MACOS=$(uname | grep "Darwin")

# Used for colored output
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
ENDCOLOR="\e[0m"


#
# ═══ Utilities/plumbing ═══
set -eo pipefail

function fs:exists {
    if [ ! -f $1 ]; then
      echo "No such file $1"
      exit 255
    fi
}

function fs:ensure {
    if [ ! -f $1 ]; then
        cp $2 $1
    fi
}

function dep:exists {
    if [ ! $(which "$1") ]; then
      echo "Dependency '$1' is not installed, please make it available"
      exit 255
    fi
}

banner
"task:${@:-help}"